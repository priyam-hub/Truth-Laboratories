import time
import streamlit as st
import pandas as pd
from Classifier_Models import Classifier_model_builder_heart as cmb
import pickle
import numpy as np
from streamlit_toggle import st_toggle_switch
import json
from streamlit_lottie import st_lottie


def app():
    def load_lottiefile(filepath: str):
        with open(filepath, "r") as f:
            return json.load(f)

    lottie_coding = load_lottiefile("res/Yoga_Vrikshasana.json")
    st.title("Heart Disease Detector")
    st.info("This Model predicts whether a person is suffering from Heart Disease or not")

    st.sidebar.header('Report Uploader')

    uploaded_file = st.sidebar.file_uploader("Upload your parameters of your Report through a CSV File", type=["csv"])

    if uploaded_file is not None:
        input_df = pd.read_csv(uploaded_file)
    else:
        def patient_details():
            sex = st.sidebar.selectbox('Sex', ('M', 'F'))
            ChestPainType = st.sidebar.selectbox('Chest Pain Type', ('TA', 'ASY', 'NAP'))
            RestingECG = st.sidebar.selectbox('Resting Electrocardiogram', ('Normal', 'ST', 'LVH'))
            ExerciseAngina = st.sidebar.selectbox('ExerciseAngina', ('Y', 'N'))
            ST_Slope = st.sidebar.selectbox('ST Slope', ('Up', 'Flat', 'Down'))
            Age = st.sidebar.number_input('Age', 28, 77)
            RestingBP = st.sidebar.number_input('Resting Blood Pressure', 0, 200)
            Cholesterol = st.sidebar.number_input('Cholesterol', 0, 603)
            MaxHR = st.sidebar.number_input('Maximum Heart Rate', 60, 202)
            Oldpeak = st.sidebar.number_input('Old peak', -2, 6)
            FastingBS = st.sidebar.number_input('Fasting Blood Sugar', 0, 1)

            data = {'Age': Age,
                    'Sex': sex,
                    'ChestPainType': ChestPainType,
                    'RestingBP': RestingBP,
                    'Cholesterol': Cholesterol,
                    'FastingBS': FastingBS,
                    'RestingECG': RestingECG,
                    'MaxHR': MaxHR,
                    'ExerciseAngina': ExerciseAngina,
                    'Oldpeak': Oldpeak,
                    'ST_Slope': ST_Slope, }

            features = pd.DataFrame(data, index=[0])
            return features

        input_df = patient_details()

    heart_disease_raw = pd.read_csv('res/dataset/heart.csv')
    heart = heart_disease_raw.drop(columns=['HeartDisease'])
    df = pd.concat([input_df, heart], axis=0)

    # Encoding of ordinal features
    encode = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']
    for col in encode:
        dummy = pd.get_dummies(df[col], prefix=col)
        df = pd.concat([df, dummy], axis=1)
        del df[col]
    df = df[:1]  # Selects only the first row (the user input data)
    df.loc[:, ~df.columns.duplicated()]

    if uploaded_file is not None:
        st.write(df)
    else:
        st.write('Waiting for the Report to be Uploaded... Currently displaying the Parameters given manually')
        df = df.loc[:, ~df.columns.duplicated()]
        st.write(df)

    # Load the classification models
    load_clf_NB = pickle.load(open('res/pickle/heart_disease_classifier_NB.pkl', 'rb'))
    #load_clf_KNN = pickle.load(open('res/pickle/heart_disease_classifier_KNN.pkl', 'rb'))
    load_clf_DT = pickle.load(open('res/pickle/heart_disease_classifier_DT.pkl', 'rb'))
    load_clf_LR = pickle.load(open('res/pickle/heart_disease_classifier_LR.pkl', 'rb'))
    load_clf_RF = pickle.load(open('res/pickle/heart_disease_classifier_RF.pkl', 'rb'))

    # Apply models to make predictions
    prediction_NB = load_clf_NB.predict(df)
    prediction_proba_NB = load_clf_NB.predict_proba(df)
    #prediction_KNN = load_clf_KNN.predict(df)
    #prediction_proba_KNN = load_clf_KNN.predict_proba(df)
    prediction_DT = load_clf_DT.predict(df)
    prediction_proba_DT = load_clf_DT.predict_proba(df)
    prediction_LR = load_clf_LR.predict(df)
    prediction_proba_LR = load_clf_LR.predict_proba(df)
    prediction_RF = load_clf_RF.predict(df)
    prediction_proba_RF = load_clf_RF.predict_proba(df)

    def NB():
        st.subheader('Prediction of Na√Øve Bayes Classifier')
        NB_prediction = np.array([0, 1])
        if NB_prediction[prediction_NB] == 1:
            st.write("<p style='font-size:20px;color: red'><b>I am sorryy!! You are suffering from Heart Disease üò∞</b></p>",
                     unsafe_allow_html=True)
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)
        
        #Toggle Switch
        enabled = st_toggle_switch("Show Detailed Report")
        if enabled:
            st.subheader('Report Generated by Na√Øve Bayes Classifier')
            st.write(prediction_proba_NB)
            col1, col2 = st.columns(2)
            with col1:
                st.text('Understanding the Report',
                        help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
            with col2:
                st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")

            cmb.plt_NB()


    # def KNN():
    #     st.subheader('K-Nearest Neighbour Prediction')
    #     knn_prediction = np.array([0, 1])
    #     if knn_prediction[prediction_KNN] == 1:
    #         st.write("<p style='font-size:20px;color: orange'><b>You have heart disease.</b></p>",
    #                  unsafe_allow_html=True)
    #     else:
    #         st.write("<p style='font-size:20px;color: green'><b>You are fine üëç</b></p>", unsafe_allow_html=True)
    #     enabled = st_toggle_switch("See detailed prediction")
    #     if enabled:
    #         st.subheader('KNN Prediction Probability')
    #         st.write(prediction_proba_KNN)
    #         col1, col2 = st.columns(2)
    #         with col1:
    #             st.text('Why Classifier Report',
    #                     help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
    #         with col2:
    #             st.text('How to read',
    #                     help="By looking at the cells where the true and predicted labels intersect, you can see the counts of correct and incorrect predictions. This helps evaluate the model's performance in distinguishing between 'No Disease' and 'Disease' categories.")

    #         cmb.plt_KNN()


    def DT():
        st.subheader('Prediction of Decision Tree Classifier')
        DT_prediction = np.array([0, 1])
        if DT_prediction[prediction_DT] == 1:
            st.write("<p style='font-size:20px; color: red'><b>I am sorryy!! You are suffering from Heart Disease üò∞</b></p>",
                     unsafe_allow_html=True)
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)
        enabled = st_toggle_switch("See detailed prediction")
        
        #Toggle Switch
        if enabled:
            st.subheader('Report Generated by Decision Tree Classifier ')
            st.write(prediction_proba_DT)
            col1, col2 = st.columns(2)
            with col1:
                st.text('Understanding the Report',
                        help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
            with col2:
                st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")

            cmb.plt_DT()


    def LR():
        st.subheader('Prediction of Logistic Regression')
        LR_prediction = np.array([0, 1])
        if LR_prediction[prediction_LR] == 1:
            st.write("<p style='font-size:20px; color: red'><b>I am sorryy!! You are suffering from Heart Disease üò∞<b></p>",
                     unsafe_allow_html=True)
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)
        
        #Toggle Switch
        enabled = st_toggle_switch("Show Detailed Report")
        if enabled:
            st.subheader('Report Generated by Logistic Regression')
            st.write(prediction_proba_LR)
            col1, col2 = st.columns(2)
            with col1:
                st.text('Understanding the Report',
                        help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
            with col2:
                st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")

            cmb.plt_LR()


    def RF():
        st.subheader('Prediction of Random Forest')
        RF_prediction = np.array([0, 1])
        if RF_prediction[prediction_RF] == 1:
            st.write("<p style='font-size:20px; color: red'><b>I am sorryy!! You are suffering from Heart Disease üò∞</b></p>",
                     unsafe_allow_html=True)
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)
        
        #Toggle Switch
        enabled = st_toggle_switch("Show Detailed Report")
        if enabled:
            st.subheader('Report Generated by Random Forest')
            st.write(prediction_proba_RF)
            col1, col2 = st.columns(2)
            with col1:
                st.text('Understanding the Report',
                        help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
            with col2:
                st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")
            cmb.plt_RF()


    def predict_best_algorithm():

        if cmb.best_model == 'Naive Bayes':
            NB()

        # elif cmb.best_model == 'K-Nearest Neighbors (KNN)':
        #     KNN()

        elif cmb.best_model == 'Decision Tree':
            DT()

        elif cmb.best_model == 'Logistic Regression':
            LR()

        elif cmb.best_model == 'Random Forest':
            RF()
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)

    st.markdown("üëà Provide your input data in the sidebar")
    
    # Displays the user input features
    with st.expander("Prediction Results",expanded=False):
        
        # Display the input dataframe
        st.write("Your input values are shown below:")
        st.dataframe(input_df)
        
        # Call the predict_best_algorithm() function
        st.text('Showing you the Best Report Generated by our Service', help='This Report shows Approximate Prediction')
        predict_best_algorithm()

        # Tips, Diagnosis, Treatment, and Recommendations.
        st.subheader("Opinions provided by Our Consultancy on Heart Disease üë®‚Äç‚öïÔ∏è")
        tab1, tab2, tab3 = st.tabs(["Advices", "Work-Out", "Diet"])
        with tab1:
            st.subheader("Advices of Our Consultancy:")
            prevention_tips = [
                "1. **Monitor Cholesterol and Blood Pressure:** Regularly check cholesterol and blood pressure levels and follow medical advice to keep them within healthy ranges.",
                "2. **Adopt a Heart-Healthy Diet:** Consume a balanced diet rich in fruits, vegetables, whole grains, lean proteins, and healthy fats to maintain heart health and manage weight.",
                "3. **Quit Smoking:** Avoid all forms of tobacco to reduce the risk of heart disease and improve overall health.",
                "4. **Regular Physical Activity:** Aim for at least 30 to 60 minutes of moderate-intensity exercise daily to strengthen the heart and lower blood pressure.",
                "5. **Limit Alcohol Intake:** Consume alcohol in moderation, as excessive alcohol consumption can contribute to heart disease.",
                "6. **Maintain a Healthy Weight:** Achieve and maintain a healthy weight through a combination of healthy eating and regular physical activity to reduce strain on the heart."
            ]
            for tip in prevention_tips:
                st.write(f"- {tip}")
        with tab2:
            st.subheader("Exercise Recommended by our Experts:")
            c1, c2, c3 = st.columns([1, 1, 1], gap="small")
            with c1:
                exercises = [
                    "1. **Trikonasana (Triangle Pose)**",
                    "2. **Standing Forward Bend**",
                    "3. **Extended Triangle Pose**",
                    "4. **Bridge Pose**",
                    "5. **Chair Pose**"
                ]
                for exercise in exercises:
                    st.write(f"- {exercise}")
            with c3:
                st_lottie(
                    lottie_coding,
                    speed=1,
                    reverse=False,
                    loop=True,
                    quality="medium",
                    height=None,
                    width=None,
                    key=None,
                )
        with tab3:
            st.subheader("Diet Control  Measures Recommended by our Experts:")
            diet_tips = [
                "1. **Control Portion Size:** Manage portion sizes to prevent overeating and maintain a healthy weight, which is crucial for heart health. ",
                "2. **Increase Fruits and Vegetables:** Incorporate plenty of fruits and vegetables into your diet for essential vitamins, minerals, and antioxidants that support heart health. Aim for a variety of colors and types.",
                "3. **Choose Whole Grains:** Opt for whole grains such as brown rice, whole wheat bread, and oats instead of refined grains to increase fiber intake and promote heart health",
                "4. **Limit Saturated and Trans Fats:** Reduce intake of saturated fats found in fatty meats, butter, and cheese, as well as trans fats found in processed and fried foods, to lower cholesterol levels and decrease the risk of heart disease.",
                "5. **Choose Healthy Fats:** Include sources of healthy fats such as nuts, seeds, avocados, and olive oil, which can improve cholesterol levels and protect heart health.",
                "6. **Limit Sodium Intake:** Reduce consumption of high-sodium foods like processed foods, canned soups, and salty snacks to manage blood pressure and reduce the risk of heart disease."
            ]
            for tip in diet_tips:
                st.write(f"- {tip}")

    # Create a multiselect for all the plot options
    selected_plots = st.multiselect("You can see all the Detailed Reports Here üëá",
                                    ["Na√Øve Bayes", "Decision Tree", "Logistic Regression",
                                     "Random Forest"], default=[], key="ms_H")
    if "ms_H" not in st.session_state:
        st.session_state.selected_plots = []
    # Check the selected plots and call the corresponding plot functions
    if selected_plots:
        col1, col2 = st.columns(2)
        with col1:
            st.text('Understanding the Report',
                        help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
            with col2:
                st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")

    placeholder = st.empty()

    # Check the selected plots and call the corresponding plot functions
    if "Na√Øve Bayes" in selected_plots:
        with st.spinner("Generating Report of Na√Øve Bayes Classifier...."):
            cmb.plt_NB()
            time.sleep(1)

    # if "K-Nearest Neighbors" in selected_plots:
    #     with st.spinner("Generating KNN...."):
    #         cmb.plt_KNN()
    #         time.sleep(1)

    if "Decision Tree" in selected_plots:
        with st.spinner("Generating Report of Decision Tree Classifier...."):
            cmb.plt_DT()
            time.sleep(1)

    if "Logistic Regression" in selected_plots:
        with st.spinner("Generating Report of Logistic Regression...."):
            cmb.plt_LR()
            time.sleep(1)

    if "Random Forest" in selected_plots:
        with st.spinner("Generating Report of Random Forest Algorithm...."):
            cmb.plt_RF()
            time.sleep(1)

    # Remove the placeholder to display the list options
    placeholder.empty()
