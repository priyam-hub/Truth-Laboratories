import time
import streamlit as st
import pandas as pd
import Classifier_Models.Classifier_model_builder_diabetes as cmb
import pickle
import numpy as np
from streamlit_toggle import st_toggle_switch
import json
from streamlit_lottie import st_lottie

def app():
    def load_lottiefile(filepath: str):
        with open(filepath, "r") as f:
            return json.load(f)

    lottie_coding = load_lottiefile("res/Yoga_Feet.json")

    st.title("PIMA Indian Diabetes Predictor")
    st.info("This Model predicts whether a Female is suffering from PIMA Indian Diabetes or not")
    st.markdown("""
    **Note** - :red[THIS PREDICTION MODEL IS ONLY FOR FEMALES.]
    """)

    st.sidebar.header('Report Uploader')

    uploaded_file = st.sidebar.file_uploader("Upload your parameters of your Report through a CSV File", type=["csv"])

    if uploaded_file is not None:
        input_df = pd.read_csv(uploaded_file)
    else:
        def patient_details():
            Pregnancies = st.sidebar.number_input('Pregnancies', 0, 17)
            Glucose = st.sidebar.number_input('Glucose', 0, 199)
            BloodPressure = st.sidebar.number_input('BloodPressure', 0, 122)
            SkinThickness = st.sidebar.number_input('SkinThickness', 0, 99)
            Insulin = st.sidebar.number_input('Insulin', 0, 846)
            BMI = st.sidebar.number_input('BMI', 0.0, 67.1, step=0.1)
            DiabetesPedigreeFunction = st.sidebar.number_input('DiabetesPedigreeFunction', 0.08, 2.42, step=0.01)
            Age = st.sidebar.number_input('Age', 21, 81)

            data = {'Pregnancies': Pregnancies,
                    'Glucose': Glucose,
                    'BloodPressure': BloodPressure,
                    'SkinThickness': SkinThickness,
                    'Insulin': Insulin,
                    'BMI': BMI,
                    'DiabetesPedigreeFunction': DiabetesPedigreeFunction,
                    'Age': Age, }

            features = pd.DataFrame(data, index=[0])
            return features

        input_df = patient_details()
    heart = cmb.X
    df = pd.concat([input_df, heart], axis=0)
    df = df[:1]  # Selects only the first row (the user input data)
    df.loc[:, ~df.columns.duplicated()]

    if uploaded_file is not None:
        st.write(df)

    else:
        st.write('Waiting for the Report to be Uploaded... Currently displaying the Parameters given manually')
        df = df.loc[:, ~df.columns.duplicated()]
        st.write(df)

    # Load the classification models
    load_clf_NB = pickle.load(open('res/pickle/diabetes_disease_classifier_NB.pkl', 'rb'))
    #load_clf_KNN = pickle.load(open('res/pickle/diabetes_disease_classifier_KNN.pkl', 'rb'))
    load_clf_DT = pickle.load(open('res/pickle/diabetes_disease_classifier_DT.pkl', 'rb'))
    load_clf_LR = pickle.load(open('res/pickle/diabetes_disease_classifier_LR.pkl', 'rb'))
    load_clf_RF = pickle.load(open('res/pickle/diabetes_disease_classifier_RF.pkl', 'rb'))
    
    # Apply models to make predictions
    prediction_NB = load_clf_NB.predict(df)
    prediction_proba_NB = load_clf_NB.predict_proba(df)
    #prediction_KNN = load_clf_KNN.predict(df)
    #prediction_proba_KNN = load_clf_KNN.predict_proba(df)
    prediction_DT = load_clf_DT.predict(df)
    prediction_proba_DT = load_clf_DT.predict_proba(df)
    prediction_LR = load_clf_LR.predict(df)
    prediction_proba_LR = load_clf_LR.predict_proba(df)
    prediction_RF = load_clf_RF.predict(df)
    prediction_proba_RF = load_clf_RF.predict_proba(df)

    def NB():
        st.subheader('Prediction of Na√Øve Bayes Classifier')
        NB_prediction = np.array([0, 1])
        if NB_prediction[prediction_NB] == 1:
            st.write("<p style='font-size:20px;color: red'><b>I am Sorryy!! You are Suffering from PIMA Indian Diabetes üò∞</b></p>",
                     unsafe_allow_html=True)
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)
        
        #Toggle Switch
        enabled = st_toggle_switch("Show Detailed Report")
        if enabled:
            st.subheader('Report Generated by Na√Øve Bayes Classifier ')
            st.write(prediction_proba_NB)
            col1, col2 = st.columns(2)
            with col1:
                st.text('Understanding the Report',
                        help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
            with col2:
                st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")

            cmb.plt_NB()

    # def KNN():
    #     st.subheader('K-Nearest Neighbour Prediction')
    #     knn_prediction = np.array([0, 1])
    #     if knn_prediction[prediction_KNN] == 1:
    #         st.write("<p style='font-size:20px;color: orange'><b>You have diabetes.</b></p>",
    #                  unsafe_allow_html=True)
    #     else:
    #         st.write("<p style='font-size:20px;color: green'><b>You are fine üëç</b></p>", unsafe_allow_html=True)
    #     enabled = st_toggle_switch("See detailed prediction")
    #     if enabled:
    #         st.subheader('KNN Prediction Probability')
    #         st.write(prediction_proba_KNN)
    #         col1, col2 = st.columns(2)
    #         with col1:
    #             st.text('Why Classifier Report',
    #                     help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
    #         with col2:
    #             st.text('How to read',
    #                     help="By looking at the cells where the true and predicted labels intersect, you can see the counts of correct and incorrect predictions. This helps evaluate the model's performance in distinguishing between 'No Disease' and 'Disease' categories.")

    #         cmb.plt_KNN()

    def DT():
        st.subheader('Prediction of Decision Tree Classifier')
        DT_prediction = np.array([0, 1])
        if DT_prediction[prediction_DT] == 1:
            st.write("<p style='font-size:20px; color: red'><b>I am Sorryy!! You are Suffering from PIMA Indian Diabetes üò∞</b></p>",
                     unsafe_allow_html=True)
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)
        
        #Toggle Switch
        enabled = st_toggle_switch("Show Detailed Report")
        if enabled:
            st.subheader('Report Generated by Decision Tree Classifier')
            st.write(prediction_proba_DT)
            col1, col2 = st.columns(2)
            with col1:
                st.text('Understanding the Report',
                        help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
            with col2:
                st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")

            cmb.plt_DT()

    def LR():
        st.subheader('Prediction of Logistic Regression')
        LR_prediction = np.array([0, 1])
        if LR_prediction[prediction_LR] == 1:
            st.write("<p style='font-size:20px; color: red'><b>I am Sorryy!! You are Suffering from PIMA Indian Diabetes üò∞<b></p>",
                     unsafe_allow_html=True)
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)
        
        #Toggle Switch
        enabled = st_toggle_switch("Show Detailed Report")
        if enabled:
            st.subheader('Report Generated by Logistic Regression')
            st.write(prediction_proba_LR)
            col1, col2 = st.columns(2)
            with col1:
                st.text('Understanding the Report',
                        help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
            with col2:
                st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")

            cmb.plt_LR()

    def RF():
        st.subheader('Prediction of Random Forest')
        RF_prediction = np.array([0, 1])
        if RF_prediction[prediction_RF] == 1:
            st.write("<p style='font-size:20px; color: red'><b>I am Sorryy!! You are Suffering from PIMA Indian Diabetes üò∞</b></p>",
                     unsafe_allow_html=True)
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)
        
        #Toggle Switch
        enabled = st_toggle_switch("Show Detailed Report")
        if enabled:
            st.subheader('Report Generated by Random Forest')
            st.write(prediction_proba_RF)
            col1, col2 = st.columns(2)
            with col1:
                st.text('Understanding the Report',
                        help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
            with col2:
                st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")
            cmb.plt_RF()

    def predict_best_algorithm():
        if cmb.best_model == 'Naive Bayes':
            NB()

        # elif cmb.best_model == 'K-Nearest Neighbors (KNN)':
        #     KNN()

        elif cmb.best_model == 'Decision Tree':
            DT()

        elif cmb.best_model == 'Logistic Regression':
            LR()

        elif cmb.best_model == 'Random Forest':
            RF()
        else:
            st.write("<p style='font-size:20px;color: green'><b>You are absolutely Fit 'n Fine üëç</b></p>", unsafe_allow_html=True)

    st.markdown("üëà Provide your input data in the sidebar")    # Displays the user input features
    with st.expander("Prediction Results",expanded=False):
        
        # Display the input dataframe
        st.write("Your input values are shown below:")
        st.dataframe(input_df)
        
        # Call the predict_best_algorithm() function
        st.text('Showing you the Best Report Generated by our Service', help='This Report shows Approximate Prediction')
        predict_best_algorithm()
        
        # Tips, Diagnosis, Treatment, and Recommendations.
        st.subheader("Opinions provided by Our Consultancy on PIMA Indian Diabetes üë®‚Äç‚öïÔ∏è")
        tab1, tab2, tab3 = st.tabs(["Advises", "Work-Out", "Diet"])
        with tab1:
            st.subheader("Advices of our Consultancy")
            management_tips = [
                "1. **Maintain a Healthy Weight:** Losing extra weight and maintaining a healthy body weight can significantly reduce the risk of developing type 2 diabetes",
                "2. **Stay Physically Active:** Engage in regular physical activity to help control weight, lower blood sugar levels, and boost sensitivity to insulin",
                "3. **Adopt a Plant-Based Diet:** Incorporate more healthy plant foods such as fruits, vegetables, whole grains, nuts, and legumes into your diet ",
                "4. **Choose Healthy Fats:** Opt for healthy fats found in foods like avocados, nuts, seeds, and olive oil, while minimizing saturated and trans fats",
                "5. **Limit Processed Foods:** Reduce intake of processed foods, sugary beverages, and refined carbohydrates to lower the risk of insulin resistance and type 2 diabetes",
                "6. **Control Portion Sizes:** Be mindful of portion sizes to prevent overeating and maintain a balanced diet"
            ]
            for tip in management_tips:
                st.write(f"- {tip}")
        with tab2:
            st.subheader("Exercise Recommended by our Experts:")
            c1, c2, c3 = st.columns([1, 1, 1], gap="small")
            with c1:
                exercise_recommendations = [
                    "1. **Walking** ",
                    "2. **Cycling** ",
                    "3. **Aerobic Dance** ",
                    "4. **Weightlifting** ",
                    "5. **Swimming** "
                ]
                for exercise in exercise_recommendations:
                    st.write(f"- {exercise}")
            with c3:
                st_lottie(
                    lottie_coding,
                    speed=1,
                    reverse=False,
                    loop=True,
                    quality="medium",
                    height=None,
                    width=None,
                    key=None,
                )
        with tab3:
            st.subheader("Diet Control  Measures Recommended by our Experts:")
            dietary_recommendations = [
                "1. **Limit Carbohydrates:** Restrict intake of carbohydrates with added sugars or refined grains like white bread and white rice. Opt for carbohydrates from fruits, vegetables, and whole grains",
                "2. **Healthy Eating Plan:** Embrace a diet rich in nutrients, low in fat and calories, with a focus on fruits, vegetables, and whole grains",
                "3. **Balanced Diet:** Ensure meals include a balance of carbohydrates, proteins, and healthy fats to manage blood sugar levels effectively",
                "4. **Portion Control:** Watch portion sizes to avoid overeating and maintain a healthy weight",
                "5. **Consistent Meal Timing:** Maintain regular meal times and spacing throughout the day to help regulate blood sugar levels"
            ]
            for food in dietary_recommendations:
                st.write(f"- {food}")

    # Create a multiselect for all the plot options
    selected_plots = st.multiselect("You can see all plots hereüëá",
                                    ["Na√Øve Bayes", "Decision Tree", "Logistic Regression",
                                     "Random Forest"], default=[],key="ms_D")
    if "ms_D" not in st.session_state:
        st.session_state.selected_plots = []

    # Check the selected plots and call the corresponding plot functions
    if selected_plots:
        col1, col2 = st.columns(2)
        with col1:
            st.text('Understanding the Report',
                    help="It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.")
        with col2:
            st.text('Understanding Confusion Matrix',
                        help="A confusion matrix is a performance evaluation tool in machine learning that provides a concise summary of the performance of a classification model. It presents a tabular representation of the model's predictions compared to the actual outcomes.")


    placeholder = st.empty()

    # Check the selected plots and call the corresponding plot functions
    if "Na√Øve Bayes" in selected_plots:
        with st.spinner("Generating Naive Bayes...."):
            cmb.plt_NB()
            time.sleep(1)

    if "K-Nearest Neighbors" in selected_plots:
        with st.spinner("Generating KNN...."):
            cmb.plt_KNN()
            time.sleep(1)

    if "Decision Tree" in selected_plots:
        with st.spinner("Generating Decision Tree...."):
            cmb.plt_DT()
            time.sleep(1)

    if "Logistic Regression" in selected_plots:
        with st.spinner("Generating Logistic Regression...."):
            cmb.plt_LR()
            time.sleep(1)

    if "Random Forest" in selected_plots:
        with st.spinner("Generating Random Forest...."):
            cmb.plt_RF()
            time.sleep(1)

    # Remove the placeholder to display the list options
    placeholder.empty()